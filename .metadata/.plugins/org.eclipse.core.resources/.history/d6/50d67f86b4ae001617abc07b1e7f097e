import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map.Entry;
import java.util.Vector;


public class Master {
	static String finalFile = "";
	static String directory = "/cal/homes/mbenseddik/shavadoopFiles/";
	static String pcsFilePath = "listOfPcs2.txt";
	static String extensionFiles = ".txt";
	static String finalFileName = "reducedFile.txt";
	static long timeout = 2000L;


	public static ArrayList<String> getListOfActivePcs(String listOfPcsFile) throws IOException, InterruptedException
	{
		ArrayList<CheckPcsThread> pcThreads = new ArrayList<CheckPcsThread>();
		Vector<String> allPcs = new Vector<>();
		ArrayList<String> listOfActivePcs = new ArrayList<String>();
		long startTime = System.nanoTime();

		FileReader fileReader = new FileReader(listOfPcsFile);
		BufferedReader br = new BufferedReader(fileReader);
		String line;
		while( (line = br.readLine()) != null)
		{
			allPcs.add(line);
		}

		br.close();

		System.out.println("\nChecking The connexion on all the pcs...");
		ShavadoopUtils.displayStars();

		System.out.print("[");
		for(int i=0;i < allPcs.size(); i++)
		{
			CheckPcsThread threadOfWord = new CheckPcsThread(allPcs.get(i));
			pcThreads.add(threadOfWord);
			pcThreads.get(i).start();
			System.out.print( "==");
		}

		for(int i=0;i < pcThreads.size(); i++)
		{
			pcThreads.get(i).join();
			if(pcThreads.get(i).isActivePc() == true)
			{
				listOfActivePcs.add(pcThreads.get(i).getPcName());
			}
		}

		System.out.print( "]");
		System.out.println("\nChecking the pcs Done! The list of pcs :");
		for(String pc : listOfActivePcs)
		{
			System.out.println(pc + " : OK !");
		}

		long endTime = System.nanoTime();
		long duration = (endTime - startTime) / 1000000000;
		System.out.println("Duration of SEARCH FOR ACTVE PCS : " + duration + "seconds !");
		return listOfActivePcs;
	}

	public static HashMap<String,ArrayList<String>> splitOnUmx(ArrayList<String> listOfActivePcs,ArrayList<String> SxDictionnary) throws InterruptedException
	{
		ArrayList<ShavadoopThread> threads = new ArrayList<ShavadoopThread>();
		HashMap<String,ArrayList<String>> UmxDictionnary = new HashMap<String, ArrayList<String>>();
		long startTime = System.nanoTime();
		int i;
		int index = 0;
		int a = 0;

		System.out.println("\nSpliting on Umx files...");
		ShavadoopUtils.displayStars();

		threads = new ArrayList<ShavadoopThread>();
		for (i = 0; i< SxDictionnary.size(); i++)
		{
			String pcToRunOn = listOfActivePcs.get(index);
			String SxToRun = SxDictionnary.get(i);
			System.out.println("On lance Slave sur le pc : " + pcToRunOn + " pour split le fichier : " + SxToRun);
			threads.add(new ShavadoopThread(pcToRunOn,SxToRun,"SxUMx"));
			threads.get(i).start();

			index = (index +1) % listOfActivePcs.size();
		}

		index = 0;

		for (i = 0; i< SxDictionnary.size(); i++)
		{
			a = i+1;
			String pcToRunOn = listOfActivePcs.get(index);
			String SxToRun = SxDictionnary.get(i);
			threads.get(i).join(timeout);
			if(threads.get(i).isAlive())
			{
				System.out.println("Thread mort : " + threads.get(i).getName());
				threads.get(i).interrupt();
			}
			else
			{
				UmxDictionnary.put("Um"+ a +extensionFiles, threads.get(i).getSlaveOutputStream());
				System.out.println("Traitement sur le pc : " + pcToRunOn + " pour le fichier : " + SxToRun + " Fini !");
				index = (index +1) % listOfActivePcs.size();
			}

		}

		// relancer sur les threads morts

		System.out.println("\nSpliting on Umx Done!");
		long endTime = System.nanoTime();
		long duration = (endTime - startTime) / 1000000000;
		System.out.println("Duration of SPLIT ON UMX : " + duration + "seconds !");
		ShavadoopUtils.displayStars();

		return UmxDictionnary;
	}

	public static HashMap<String,String> splitOnSmXAndRmx(HashMap<String, HashSet<String>> wordsDictionnary, ArrayList<String> listOfActivePcs) throws InterruptedException
	{
		HashMap<String, String> RmxDictionnary = new HashMap<String, String>();
		ArrayList<ShavadoopThread> threads = new ArrayList<ShavadoopThread>();
		ArrayList<ShavadoopThread> deadThreads = new ArrayList<ShavadoopThread>();
		long startTime = System.nanoTime();

		int i = 0;
		int index = 0;

		System.out.println("\nSpliting on Smx And doing the Rmx part...");
		ShavadoopUtils.displayStars();
		for (Entry<String, HashSet<String>> entry : wordsDictionnary.entrySet())
		{
			String pcToRunOn = listOfActivePcs.get(index);
			String word = entry.getKey();
			HashSet<String> listUmx = entry.getValue();
			int a = i + 1;
			String pathSmx = directory + "Sm" + a + extensionFiles;

			System.out.println("On lance Slave sur le pc : " + pcToRunOn + " pour avoir le reducedFile : " + pathSmx);
			threads.add(new ShavadoopThread(pcToRunOn,word,listUmx,pathSmx,"UMxSMx"));
			threads.get(i).start();
			i++;
			index = (index +1) % listOfActivePcs.size();
		}

		index = 0;
		for (i = 0;i< threads.size(); i++)
		{
			int a = i+1;
			String pcToRunOn = listOfActivePcs.get(index);
			threads.get(i).join(timeout);
			if(threads.get(i).isAlive())
			{
				System.out.println("Thread mort : " + threads.get(i).getName());
				threads.get(i).interrupt();
				deadThreads.add(threads.get(i));
			}
			if(!threads.get(i).getSlaveOutputStream().isEmpty())
				finalFile += threads.get(i).getSlaveOutputStream().get(0) + "\n";
			RmxDictionnary.put("Rm" + a + extensionFiles, pcToRunOn);
			index = (index +1) % listOfActivePcs.size();
		}

		System.out.println("\nSmx and Rmx parts Done!");
		long endTime = System.nanoTime();
		long duration = (endTime - startTime) / 1000000000;
		System.out.println("Duration of SPLIT ON SMX AND RMX : " + duration + "seconds !");
		ShavadoopUtils.displayStars();
		System.out.println("\nAll Done!");

		return RmxDictionnary;
	}


	public static HashMap<String,HashSet<String>> runOnSlaves(ArrayList<String> SxDictionnary) throws IOException, InterruptedException
	{
		HashMap<String,ArrayList<String>> UmxDictionnary = new HashMap<String,ArrayList<String>>();

		ArrayList<String> listOfActivePcs = getListOfActivePcs(pcsFilePath);
		UmxDictionnary = splitOnUmx(listOfActivePcs,SxDictionnary);
		HashMap<String,HashSet<String>> wordsDictionnary = ShavadoopUtils.convertUmxDictToWordsDict(UmxDictionnary);
		System.out.println("Words-Umx Dictionnary :");
		System.out.println(Arrays.deepToString(wordsDictionnary.entrySet().toArray()));
		splitOnSmXAndRmx(wordsDictionnary, listOfActivePcs);

		return wordsDictionnary;
	}
	

	public static void main(String[] args) throws IOException, InterruptedException {

		
		ShavadoopUtils.welcome();
		ShavadoopUtils.deleteOldFiles();
		ShavadoopUtils.displayStars();
		ShavadoopUtils.displayStars();

		long startTime = System.nanoTime();
		ArrayList<String> SxDictionnary = ShavadoopUtils.splitSxBloc(args,100);
		runOnSlaves(SxDictionnary);
		ShavadoopUtils.saveFinalFile();
		long endTime = System.nanoTime();
		long duration = (endTime - startTime) / 1000000000;
		System.out.println("Total Duration : " + duration + "seconds !");

	}
}
